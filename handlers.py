from aiogram import Router
from aiogram.types import Message
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from states import ProfileSetup
import requests

router = Router()

users = {}

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@router.message(Command("start"))
async def cmd_start(message: Message):
    await message.reply("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –Ø –≤–∞—à –±–æ—Ç.\n–í–≤–µ–¥–∏—Ç–µ /help –¥–ª—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥.")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help
@router.message(Command("help"))
async def cmd_help(message: Message):
    await message.reply(
        "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/start - –ù–∞—á–∞–ª–æ —Ä–∞–±–æ—Ç—ã\n"
        "/set_profile - –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤–∞—à–µ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è\n"
        "/log_water <–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ> - –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—ã–ø–∏—Ç–æ–π –≤–æ–¥—ã –≤ –º–ª\n"
        "/log_food <–Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞> - –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ –µ–¥—ã (–ø—Ä–∏–º–µ—Ä: /log_food –±–∞–Ω–∞–Ω)\n"
        "/log_workout <—Ç–∏–ø —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏> <–≤—Ä–µ–º—è (–º–∏–Ω)> - –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É (–ø—Ä–∏–º–µ—Ä: /log_workout –±–µ–≥ 30)\n"
        "/check_progress - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –≤–∞—à –ø—Ä–æ–≥—Ä–µ—Å—Å –ø–æ –≤–æ–¥–µ –∏ –∫–∞–ª–æ—Ä–∏—è–º\n"
        "/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ"
    )


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /set_profile
@router.message(Command("set_profile"))
async def cmd_set_profile(message: Message, state: FSMContext):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–µ—Å (–≤ –∫–≥):")
    await state.set_state(ProfileSetup.weight)

@router.message(ProfileSetup.weight)
async def process_weight(message: Message, state: FSMContext):
    users[message.from_user.id] = {"weight": float(message.text)}
    await state.update_data(weight=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à —Ä–æ—Å—Ç (–≤ —Å–º):")
    await state.set_state(ProfileSetup.height)

@router.message(ProfileSetup.height)
async def process_height(message: Message, state: FSMContext):
    users[message.from_user.id]["height"] = float(message.text)
    await state.update_data(height=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–æ–∑—Ä–∞—Å—Ç:")
    await state.set_state(ProfileSetup.age)

@router.message(ProfileSetup.age)
async def process_age(message: Message, state: FSMContext):
    users[message.from_user.id]["age"] = int(message.text)
    await state.update_data(age=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —É—Ä–æ–≤–µ–Ω—å –≤–∞—à–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ (–º–∏–Ω—É—Ç—ã –≤ –¥–µ–Ω—å):")
    await state.set_state(ProfileSetup.activity)

@router.message(ProfileSetup.activity)
async def process_activity(message: Message, state: FSMContext):
    users[message.from_user.id]["activity"] = int(message.text)
    await state.update_data(activity=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≥–æ—Ä–æ–¥:")
    await state.set_state(ProfileSetup.city)

@router.message(ProfileSetup.city)
async def process_city(message: Message, state: FSMContext):
    users[message.from_user.id]["city"] = message.text
    await state.update_data(city=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à—É —Ü–µ–ª—å –ø–æ –∫–∞–ª–æ—Ä–∏—è–º (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏):")
    await state.set_state(ProfileSetup.calorie_goal)

@router.message(ProfileSetup.calorie_goal)
async def process_calorie_goal(message: Message, state: FSMContext):
    users[message.from_user.id]["calorie_goal"] = int(message.text)
    await state.clear()
    await message.answer("–ü—Ä–æ—Ñ–∏–ª—å —É—Å–ø–µ—à–Ω–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω!")
    print(users)  # –î–ª—è –æ—Ç–ª–∞–¥–∫–∏


async def calculate_water(user_data: dict, temperature: float) -> int:
    base_water = user_data['weight'] * 30
    activity_bonus = 500 * (user_data['activity'] // 30)
    temperature_bonus = 500 if temperature > 25 else 0
    return base_water + activity_bonus + temperature_bonus


async def calculate_calorie(user_data: dict) -> int:
    base_calories = 10 * user_data['weight'] + 6.25 * user_data['height'] - 5 * user_data['age']
    activity_bonus = 200 + (user_data['activity'] // 30) * 50
    return base_calories + activity_bonus


@router.message(Command("log_water"))
async def log_water(message: Message, state: FSMContext):
    command_parts = message.text.split(maxsplit=1)
    
    if len(command_parts) < 2:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ–¥—ã –≤ –º–∏–ª–ª–∏–ª–∏—Ç—Ä–∞—Ö, –Ω–∞–ø—Ä–∏–º–µ—Ä, /log_water 250.")
        return

    try:
        amount = int(command_parts[1])
        user_id = message.from_user.id

        if user_id in users:
            users[user_id]['logged_water'] = users[user_id].get('logged_water', 0) + amount
            water_goal = await calculate_water(users[user_id], 25)  # –ü—Ä–∏–º–µ—Ä —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã
            remaining = water_goal - users[user_id]['logged_water']
            await message.answer(f"–í—ã –∑–∞–ø–∏—Å–∞–ª–∏ {amount} –º–ª –≤–æ–¥—ã. –û—Å—Ç–∞–ª–æ—Å—å: {max(0, remaining)} –º–ª –¥–æ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –≤–∞—à–µ–π –Ω–æ—Ä–º—ã.")
        else:
            await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ —Å–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /set_profile.")
    except ValueError:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ–¥—ã –≤ –º–∏–ª–ª–∏–ª–∏—Ç—Ä–∞—Ö, –Ω–∞–ø—Ä–∏–º–µ—Ä, /log_water 250.")


@router.message(Command("log_workout"))
async def log_workout(message: Message, state: FSMContext):
    command_parts = message.text.split(maxsplit=2)

    if len(command_parts) != 3:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ —Ç–∏–ø —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –∏ –≤—Ä–µ–º—è –≤ –º–∏–Ω—É—Ç–∞—Ö, –Ω–∞–ø—Ä–∏–º–µ—Ä, /log_workout –±–µ–≥ 30.")
        return

    workout_type, time_str = command_parts[1], command_parts[2]

    try:
        time = int(time_str)
    except ValueError:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –≤—Ä–µ–º—è –≤ –º–∏–Ω—É—Ç–∞—Ö.")
        return

    # –ü—Ä–∏–º–µ—Ä —Ä–∞—Å—á–µ—Ç–∞ –∫–∞–ª–æ—Ä–∏–π –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
    workout_calories = {
        "–±–µ–≥": 10,
        "—Ö–æ–¥—å–±–∞": 5,
        "–π–æ–≥–∞": 3,
        # –î–æ–±–∞–≤—å—Ç–µ –±–æ–ª—å—à–µ —Ç–∏–ø–æ–≤ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ –ø–æ –º–µ—Ä–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
    }

    calories_per_minute = workout_calories.get(workout_type.lower(), 5)
    burned_calories = calories_per_minute * time

    user_id = message.from_user.id

    if user_id in users:
        users[user_id]['burned_calories'] = users[user_id].get('burned_calories', 0) + burned_calories
        extra_water = 200 * (time // 30)
        users[user_id]['logged_water'] = users[user_id].get('logged_water', 0) + extra_water
        
        await message.answer(
            f"üèÉ‚Äç‚ôÇÔ∏è {workout_type.capitalize()} {time} –º–∏–Ω—É—Ç ‚Äî {burned_calories} –∫–∫–∞–ª. –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ: –≤—ã–ø–µ–π—Ç–µ {extra_water} –º–ª –≤–æ–¥—ã."
        )
    else:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ —Å–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /set_profile.")


@router.message(Command("check_progress"))
async def check_progress(message: Message):
    user_id = message.from_user.id
    
    if user_id not in users:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ —Å–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /set_profile.")
        return
    
    user = users[user_id]
    water_goal = await calculate_water(user, 25)
    calorie_goal = user.get('calorie_goal', await calculate_calorie(user))
    
    water_logged = user.get('logged_water', 0)
    calories_logged = user.get('logged_calories', 0)
    calories_burned = user.get('burned_calories', 0)
    
    water_remaining = max(0, water_goal - water_logged)
    calorie_balance = max(0, calories_logged + calories_burned - calorie_goal)

    await message.answer(
        f"üìä –ü—Ä–æ–≥—Ä–µ—Å—Å:\n"
        f"–í–æ–¥–∞:\n"
        f"- –í—ã–ø–∏—Ç–æ: {water_logged} –º–ª –∏–∑ {water_goal} –º–ª.\n"
        f"- –û—Å—Ç–∞–ª–æ—Å—å: {water_remaining} –º–ª.\n\n"
        f"–ö–∞–ª–æ—Ä–∏–∏:\n"
        f"- –ü–æ—Ç—Ä–µ–±–ª–µ–Ω–æ: {calories_logged} –∫–∫–∞–ª –∏–∑ {calorie_goal} –∫–∫–∞–ª.\n"
        f"- –°–æ–∂–∂–µ–Ω–æ: {calories_burned} –∫–∫–∞–ª.\n"
        f"- –ë–∞–ª–∞–Ω—Å: {calorie_balance} –∫–∫–∞–ª."
    )


def get_food_info(product_name):
    url = f"https://world.openfoodfacts.org/cgi/search.pl?action=process&search_terms={product_name}&json=true"
    response = requests.get(url)
    if response.status_code == 200:
        data = response.json()
        products = data.get('products', [])
        if products:
            first_product = products[0]
            return {
                'name': first_product.get('product_name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'),
                'calories': first_product.get('nutriments', {}).get('energy-kcal_100g', 0)
            }
        return None
    print(f"–û—à–∏–±–∫–∞: {response.status_code}")
    return None

@router.message(Command("log_food"))
async def log_food(message: Message, state: FSMContext):
    command_parts = message.text.split(maxsplit=1)

    if len(command_parts) < 2:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞, –Ω–∞–ø—Ä–∏–º–µ—Ä, /log_food –±–∞–Ω–∞–Ω.")
        return

    product_name = command_parts[1]
    food_info = get_food_info(product_name)
    
    if food_info:
        await message.answer(
            f"{food_info['name']} ‚Äî {food_info['calories']} –∫–∫–∞–ª –Ω–∞ 100 –≥. –°–∫–æ–ª—å–∫–æ –≥—Ä–∞–º–º –≤—ã —Å—ä–µ–ª–∏?"
        )
        user_id = message.from_user.id
        users[user_id]['product_kcal'] = food_info['calories']
    else:
        await message.answer("–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–¥—É–∫—Ç–µ.")

@router.message()
async def log_food_amount(message: Message, state: FSMContext):
    try:
        amount = int(message.text)
        user_id = message.from_user.id

        if 'product_kcal' in users.get(user_id, {}):
            kcal_per_100g = users[user_id].pop('product_kcal')
            consumed_calories = (amount * kcal_per_100g) / 100
            users[user_id]['logged_calories'] = users[user_id].get('logged_calories', 0) + consumed_calories

            await message.answer(f"–ó–∞–ø–∏—Å–∞–Ω–æ: {consumed_calories} –∫–∫–∞–ª.")
        else:
            await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ —É–∫–∞–∂–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞ —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /log_food.")
    except ValueError:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤ –≥—Ä–∞–º–º–∞—Ö, –Ω–∞–ø—Ä–∏–º–µ—Ä: 150.")


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
def setup_handlers(dp):
    dp.include_router(router)
